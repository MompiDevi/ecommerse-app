// Mocks generated by Mockito 5.4.6 from annotations
// in ecommerse_app/test/widgets/cart_item_tile_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:bloc/bloc.dart' as _i9;
import 'package:ecommerse_app/features/domain/usecase/add_to_cart.dart' as _i3;
import 'package:ecommerse_app/features/domain/usecase/get_cart.dart' as _i2;
import 'package:ecommerse_app/features/domain/usecase/remove_cart.dart' as _i4;
import 'package:ecommerse_app/features/domain/usecase/update_cart.dart' as _i5;
import 'package:ecommerse_app/features/presentation/blocs/cart/cart_bloc.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetCart_0 extends _i1.SmartFake implements _i2.GetCart {
  _FakeGetCart_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddToCart_1 extends _i1.SmartFake implements _i3.AddToCart {
  _FakeAddToCart_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoveCart_2 extends _i1.SmartFake implements _i4.RemoveCart {
  _FakeRemoveCart_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateCart_3 extends _i1.SmartFake implements _i5.UpdateCart {
  _FakeUpdateCart_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CartBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartBloc extends _i1.Mock implements _i6.CartBloc {
  MockCartBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetCart get getCart => (super.noSuchMethod(
        Invocation.getter(#getCart),
        returnValue: _FakeGetCart_0(
          this,
          Invocation.getter(#getCart),
        ),
      ) as _i2.GetCart);

  @override
  _i3.AddToCart get addToCart => (super.noSuchMethod(
        Invocation.getter(#addToCart),
        returnValue: _FakeAddToCart_1(
          this,
          Invocation.getter(#addToCart),
        ),
      ) as _i3.AddToCart);

  @override
  _i4.RemoveCart get removeCart => (super.noSuchMethod(
        Invocation.getter(#removeCart),
        returnValue: _FakeRemoveCart_2(
          this,
          Invocation.getter(#removeCart),
        ),
      ) as _i4.RemoveCart);

  @override
  _i5.UpdateCart get updateCart => (super.noSuchMethod(
        Invocation.getter(#updateCart),
        returnValue: _FakeUpdateCart_3(
          this,
          Invocation.getter(#updateCart),
        ),
      ) as _i5.UpdateCart);

  @override
  _i6.CartState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i7.dummyValue<_i6.CartState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i6.CartState);

  @override
  _i8.Stream<_i6.CartState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i8.Stream<_i6.CartState>.empty(),
      ) as _i8.Stream<_i6.CartState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i6.CartEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i6.CartEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i6.CartState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i6.CartEvent>(
    _i9.EventHandler<E, _i6.CartState>? handler, {
    _i9.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(_i9.Transition<_i6.CartEvent, _i6.CartState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void onChange(_i9.Change<_i6.CartState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
