// Mocks generated by Mockito 5.4.6 from annotations
// in ecommerse_app/test/unit/cart_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:ecommerse_app/features/domain/entities/cart.dart' as _i3;
import 'package:ecommerse_app/features/domain/repositories/cart_repository.dart'
    as _i2;
import 'package:ecommerse_app/features/domain/usecase/add_to_cart.dart' as _i6;
import 'package:ecommerse_app/features/domain/usecase/get_cart.dart' as _i4;
import 'package:ecommerse_app/features/domain/usecase/remove_cart.dart' as _i7;
import 'package:ecommerse_app/features/domain/usecase/update_cart.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCartRepository_0 extends _i1.SmartFake
    implements _i2.CartRepository {
  _FakeCartRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCart_1 extends _i1.SmartFake implements _i3.Cart {
  _FakeCart_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetCart].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCart extends _i1.Mock implements _i4.GetCart {
  MockGetCart() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CartRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCartRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CartRepository);

  @override
  _i5.Future<_i3.Cart> call({required int? userId}) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#userId: userId},
        ),
        returnValue: _i5.Future<_i3.Cart>.value(_FakeCart_1(
          this,
          Invocation.method(
            #call,
            [],
            {#userId: userId},
          ),
        )),
      ) as _i5.Future<_i3.Cart>);
}

/// A class which mocks [AddToCart].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddToCart extends _i1.Mock implements _i6.AddToCart {
  MockAddToCart() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CartRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCartRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CartRepository);

  @override
  _i5.Future<void> call({required _i3.Cart? cart}) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#cart: cart},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [RemoveCart].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveCart extends _i1.Mock implements _i7.RemoveCart {
  MockRemoveCart() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CartRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCartRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CartRepository);

  @override
  _i5.Future<_i3.Cart> call({required int? productId}) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#productId: productId},
        ),
        returnValue: _i5.Future<_i3.Cart>.value(_FakeCart_1(
          this,
          Invocation.method(
            #call,
            [],
            {#productId: productId},
          ),
        )),
      ) as _i5.Future<_i3.Cart>);
}

/// A class which mocks [UpdateCart].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateCart extends _i1.Mock implements _i8.UpdateCart {
  MockUpdateCart() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CartRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCartRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CartRepository);

  @override
  _i5.Future<void> call({
    required int? productId,
    required int? quantity,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #productId: productId,
            #quantity: quantity,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
