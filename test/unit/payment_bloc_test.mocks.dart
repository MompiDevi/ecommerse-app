// Mocks generated by Mockito 5.4.6 from annotations
// in ecommerse_app/test/unit/payment_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:ecommerse_app/features/domain/repositories/payment_repository.dart'
    as _i2;
import 'package:ecommerse_app/features/domain/usecase/confirm_payment.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePaymentRepository_0 extends _i1.SmartFake
    implements _i2.PaymentRepository {
  _FakePaymentRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ConfirmPayment].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfirmPayment extends _i1.Mock implements _i3.ConfirmPayment {
  MockConfirmPayment() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PaymentRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakePaymentRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.PaymentRepository);

  @override
  _i4.Future<String> call({
    required double? amount,
    required String? currency,
    required String? merchantDisplayName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #amount: amount,
            #currency: currency,
            #merchantDisplayName: merchantDisplayName,
          },
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #amount: amount,
              #currency: currency,
              #merchantDisplayName: merchantDisplayName,
            },
          ),
        )),
      ) as _i4.Future<String>);
}
